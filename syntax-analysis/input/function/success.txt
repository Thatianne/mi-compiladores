1 program ReservedWord
1 Test Identifier
1 ; Delimiter
3 var ReservedWord
3 { Delimiter
4 boolean ReservedWord
4 c Identifier
4 , Delimiter
4 d Identifier
4 ; Delimiter
5 integer ReservedWord
5 a Identifier
5 , Delimiter
5 b Identifier
5 ; Delimiter
6 string ReservedWord
6 e Identifier
6 ; Delimiter
7 } Delimiter
9 const ReservedWord
9 { Delimiter
10 boolean ReservedWord
10 c Identifier
10 = RelationalOperatorAssignment
10 10 Number
10 , Delimiter
10 d Identifier
10 = RelationalOperatorAssignment
10 "abc" StringEndDoubleQuotes
10 ; Delimiter
11 integer ReservedWord
11 a Identifier
11 = RelationalOperatorAssignment
11 e Identifier
11 , Delimiter
11 a Identifier
11 = RelationalOperatorAssignment
11 j Identifier
11 . Delimiter
11 k Identifier
11 , Delimiter
11 b Identifier
11 = RelationalOperatorAssignment
11 true ReservedWord
11 ; Delimiter
12 string ReservedWord
12 e Identifier
12 = RelationalOperatorAssignment
12 'b' CharacterEndSingleQuotes
12 ; Delimiter
13 } Delimiter
15 register ReservedWord
15 Pessoa Identifier
15 { Delimiter
16 string ReservedWord
16 nome Identifier
16 , Delimiter
16 sobrenome Identifier
16 ; Delimiter
17 integer ReservedWord
17 ano Identifier
17 ; Delimiter
18 } Delimiter
20 procedure ReservedWord
20 test Identifier
20 ( Delimiter
20 integer ReservedWord
20 a Identifier
20 , Delimiter
20 string ReservedWord
20 b Identifier
20 ) Delimiter
20 { Delimiter
22 } Delimiter
24 procedure ReservedWord
24 test Identifier
24 ( Delimiter
24 ) Delimiter
24 { Delimiter
26 } Delimiter
28 function ReservedWord
28 test Identifier
28 ( Delimiter
28 integer ReservedWord
28 a Identifier
28 , Delimiter
28 string ReservedWord
28 b Identifier
28 ) Delimiter
28 : Delimiter
28 integer ReservedWord
28 { Delimiter
29 return ReservedWord
29 a Identifier
29 ; Delimiter
30 } Delimiter
32 function ReservedWord
32 test Identifier
32 ( Delimiter
32 ) Delimiter
32 : Delimiter
32 integer ReservedWord
32 { Delimiter
33 return ReservedWord
33 a Identifier
33 ; Delimiter
34 } Delimiter
Success!